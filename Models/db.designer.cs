#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClaimsControl")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblAccidentsType(tblAccidentsType instance);
    partial void UpdatetblAccidentsType(tblAccidentsType instance);
    partial void DeletetblAccidentsType(tblAccidentsType instance);
    partial void InserttblAccount(tblAccount instance);
    partial void UpdatetblAccount(tblAccount instance);
    partial void DeletetblAccount(tblAccount instance);
    partial void InserttblAction_Control(tblAction_Control instance);
    partial void UpdatetblAction_Control(tblAction_Control instance);
    partial void DeletetblAction_Control(tblAction_Control instance);
    partial void InserttblAction_Menu(tblAction_Menu instance);
    partial void UpdatetblAction_Menu(tblAction_Menu instance);
    partial void DeletetblAction_Menu(tblAction_Menu instance);
    partial void InserttblAction_Tab(tblAction_Tab instance);
    partial void UpdatetblAction_Tab(tblAction_Tab instance);
    partial void DeletetblAction_Tab(tblAction_Tab instance);
    partial void InserttblActivityType(tblActivityType instance);
    partial void UpdatetblActivityType(tblActivityType instance);
    partial void DeletetblActivityType(tblActivityType instance);
    partial void InserttblCountry(tblCountry instance);
    partial void UpdatetblCountry(tblCountry instance);
    partial void DeletetblCountry(tblCountry instance);
    partial void InserttblUsers_PermissionsInRole(tblUsers_PermissionsInRole instance);
    partial void UpdatetblUsers_PermissionsInRole(tblUsers_PermissionsInRole instance);
    partial void DeletetblUsers_PermissionsInRole(tblUsers_PermissionsInRole instance);
    partial void InserttblUsers_RolesInGroup(tblUsers_RolesInGroup instance);
    partial void UpdatetblUsers_RolesInGroup(tblUsers_RolesInGroup instance);
    partial void DeletetblUsers_RolesInGroup(tblUsers_RolesInGroup instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblUsers_Permission(tblUsers_Permission instance);
    partial void UpdatetblUsers_Permission(tblUsers_Permission instance);
    partial void DeletetblUsers_Permission(tblUsers_Permission instance);
    partial void InserttblUsers_Role(tblUsers_Role instance);
    partial void UpdatetblUsers_Role(tblUsers_Role instance);
    partial void DeletetblUsers_Role(tblUsers_Role instance);
    partial void InserttblUsers_RolesGroup(tblUsers_RolesGroup instance);
    partial void UpdatetblUsers_RolesGroup(tblUsers_RolesGroup instance);
    partial void DeletetblUsers_RolesGroup(tblUsers_RolesGroup instance);
    partial void InserttblUsersActivities_Update(tblUsersActivities_Update instance);
    partial void UpdatetblUsersActivities_Update(tblUsersActivities_Update instance);
    partial void DeletetblUsersActivities_Update(tblUsersActivities_Update instance);
    partial void InserttblUsersActivities_EditedCol(tblUsersActivities_EditedCol instance);
    partial void UpdatetblUsersActivities_EditedCol(tblUsersActivities_EditedCol instance);
    partial void DeletetblUsersActivities_EditedCol(tblUsersActivities_EditedCol instance);
    partial void InserttblAccident(tblAccident instance);
    partial void UpdatetblAccident(tblAccident instance);
    partial void DeletetblAccident(tblAccident instance);
    partial void InserttblClaimType(tblClaimType instance);
    partial void UpdatetblClaimType(tblClaimType instance);
    partial void DeletetblClaimType(tblClaimType instance);
    partial void InserttblInsurer(tblInsurer instance);
    partial void UpdatetblInsurer(tblInsurer instance);
    partial void DeletetblInsurer(tblInsurer instance);
    partial void InserttblClaim(tblClaim instance);
    partial void UpdatetblClaim(tblClaim instance);
    partial void DeletetblClaim(tblClaim instance);
    partial void InserttblDriver(tblDriver instance);
    partial void UpdatetblDriver(tblDriver instance);
    partial void DeletetblDriver(tblDriver instance);
    partial void InserttblVehicleMake(tblVehicleMake instance);
    partial void UpdatetblVehicleMake(tblVehicleMake instance);
    partial void DeletetblVehicleMake(tblVehicleMake instance);
    partial void InserttblVehicleType(tblVehicleType instance);
    partial void UpdatetblVehicleType(tblVehicleType instance);
    partial void DeletetblVehicleType(tblVehicleType instance);
    partial void InserttblVehicle(tblVehicle instance);
    partial void UpdatetblVehicle(tblVehicle instance);
    partial void DeletetblVehicle(tblVehicle instance);
    partial void InserttblDocGroup(tblDocGroup instance);
    partial void UpdatetblDocGroup(tblDocGroup instance);
    partial void DeletetblDocGroup(tblDocGroup instance);
    partial void InserttblDocType(tblDocType instance);
    partial void UpdatetblDocType(tblDocType instance);
    partial void DeletetblDocType(tblDocType instance);
    partial void InserttblDoc(tblDoc instance);
    partial void UpdatetblDoc(tblDoc instance);
    partial void DeletetblDoc(tblDoc instance);
    partial void InserttblInsPolicyDoc(tblInsPolicyDoc instance);
    partial void UpdatetblInsPolicyDoc(tblInsPolicyDoc instance);
    partial void DeletetblInsPolicyDoc(tblInsPolicyDoc instance);
    partial void InserttblWarningEvent(tblWarningEvent instance);
    partial void UpdatetblWarningEvent(tblWarningEvent instance);
    partial void DeletetblWarningEvent(tblWarningEvent instance);
    partial void InserttblWarning(tblWarning instance);
    partial void UpdatetblWarning(tblWarning instance);
    partial void DeletetblWarning(tblWarning instance);
    partial void InserttblInsPolicy(tblInsPolicy instance);
    partial void UpdatetblInsPolicy(tblInsPolicy instance);
    partial void DeletetblInsPolicy(tblInsPolicy instance);
    #endregion
		
		public dbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ClaimsControlConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblAccidentsType> tblAccidentsTypes
		{
			get
			{
				return this.GetTable<tblAccidentsType>();
			}
		}
		
		public System.Data.Linq.Table<tblAccount> tblAccounts
		{
			get
			{
				return this.GetTable<tblAccount>();
			}
		}
		
		public System.Data.Linq.Table<tblAction_Control> tblAction_Controls
		{
			get
			{
				return this.GetTable<tblAction_Control>();
			}
		}
		
		public System.Data.Linq.Table<tblAction_Menu> tblAction_Menus
		{
			get
			{
				return this.GetTable<tblAction_Menu>();
			}
		}
		
		public System.Data.Linq.Table<tblAction_Tab> tblAction_Tabs
		{
			get
			{
				return this.GetTable<tblAction_Tab>();
			}
		}
		
		public System.Data.Linq.Table<tblActivityType> tblActivityTypes
		{
			get
			{
				return this.GetTable<tblActivityType>();
			}
		}
		
		public System.Data.Linq.Table<tblCountry> tblCountries
		{
			get
			{
				return this.GetTable<tblCountry>();
			}
		}
		
		public System.Data.Linq.Table<tblUsers_PermissionsInRole> tblUsers_PermissionsInRoles
		{
			get
			{
				return this.GetTable<tblUsers_PermissionsInRole>();
			}
		}
		
		public System.Data.Linq.Table<tblUsers_RolesInGroup> tblUsers_RolesInGroups
		{
			get
			{
				return this.GetTable<tblUsers_RolesInGroup>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblUsers_Permission> tblUsers_Permissions
		{
			get
			{
				return this.GetTable<tblUsers_Permission>();
			}
		}
		
		public System.Data.Linq.Table<tblUsers_Role> tblUsers_Roles
		{
			get
			{
				return this.GetTable<tblUsers_Role>();
			}
		}
		
		public System.Data.Linq.Table<tblUsers_RolesGroup> tblUsers_RolesGroups
		{
			get
			{
				return this.GetTable<tblUsers_RolesGroup>();
			}
		}
		
		public System.Data.Linq.Table<tblUsersActivities_Update> tblUsersActivities_Updates
		{
			get
			{
				return this.GetTable<tblUsersActivities_Update>();
			}
		}
		
		public System.Data.Linq.Table<tblUsersActivities_EditedCol> tblUsersActivities_EditedCols
		{
			get
			{
				return this.GetTable<tblUsersActivities_EditedCol>();
			}
		}
		
		public System.Data.Linq.Table<tblAccident> tblAccidents
		{
			get
			{
				return this.GetTable<tblAccident>();
			}
		}
		
		public System.Data.Linq.Table<tblClaimType> tblClaimTypes
		{
			get
			{
				return this.GetTable<tblClaimType>();
			}
		}
		
		public System.Data.Linq.Table<tblInsurer> tblInsurers
		{
			get
			{
				return this.GetTable<tblInsurer>();
			}
		}
		
		public System.Data.Linq.Table<tblClaim> tblClaims
		{
			get
			{
				return this.GetTable<tblClaim>();
			}
		}
		
		public System.Data.Linq.Table<tblDriver> tblDrivers
		{
			get
			{
				return this.GetTable<tblDriver>();
			}
		}
		
		public System.Data.Linq.Table<tblVehicleMake> tblVehicleMakes
		{
			get
			{
				return this.GetTable<tblVehicleMake>();
			}
		}
		
		public System.Data.Linq.Table<tblVehicleType> tblVehicleTypes
		{
			get
			{
				return this.GetTable<tblVehicleType>();
			}
		}
		
		public System.Data.Linq.Table<tblVehicle> tblVehicles
		{
			get
			{
				return this.GetTable<tblVehicle>();
			}
		}
		
		public System.Data.Linq.Table<tblDocGroup> tblDocGroups
		{
			get
			{
				return this.GetTable<tblDocGroup>();
			}
		}
		
		public System.Data.Linq.Table<tblDocType> tblDocTypes
		{
			get
			{
				return this.GetTable<tblDocType>();
			}
		}
		
		public System.Data.Linq.Table<tblDoc> tblDocs
		{
			get
			{
				return this.GetTable<tblDoc>();
			}
		}
		
		public System.Data.Linq.Table<tblInsPolicyDoc> tblInsPolicyDocs
		{
			get
			{
				return this.GetTable<tblInsPolicyDoc>();
			}
		}
		
		public System.Data.Linq.Table<tblWarningEvent> tblWarningEvents
		{
			get
			{
				return this.GetTable<tblWarningEvent>();
			}
		}
		
		public System.Data.Linq.Table<tblWarning> tblWarnings
		{
			get
			{
				return this.GetTable<tblWarning>();
			}
		}
		
		public System.Data.Linq.Table<tblInsPolicy> tblInsPolicies
		{
			get
			{
				return this.GetTable<tblInsPolicy>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.proc_Accidents")]
		public ISingleResult<proc_AccidentsResult> proc_Accidents([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountID", DbType="Int")] System.Nullable<int> accountID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccidentID", DbType="Int")] System.Nullable<int> accidentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountID, accidentID);
			return ((ISingleResult<proc_AccidentsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.proc_Vehicles")]
		public ISingleResult<proc_VehiclesResult> proc_Vehicles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountID", DbType="Int")] System.Nullable<int> accountID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Top", DbType="Bit")] System.Nullable<bool> top)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountID, top);
			return ((ISingleResult<proc_VehiclesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.proc_InsPolicies")]
		public ISingleResult<proc_InsPoliciesResult> proc_InsPolicies([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountID", DbType="Int")] System.Nullable<int> accountID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Top", DbType="Bit")] System.Nullable<bool> top)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountID, top);
			return ((ISingleResult<proc_InsPoliciesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.proc_Drivers")]
		public ISingleResult<proc_DriversResult> proc_Drivers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountID", DbType="Int")] System.Nullable<int> accountID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Top", DbType="Bit")] System.Nullable<bool> top)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountID, top);
			return ((ISingleResult<proc_DriversResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAccidentsTypes")]
	public partial class tblAccidentsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblAccident> _tblAccidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblAccidentsType()
		{
			this._tblAccidents = new EntitySet<tblAccident>(new Action<tblAccident>(this.attach_tblAccidents), new Action<tblAccident>(this.detach_tblAccidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccidentsType_tblAccident", Storage="_tblAccidents", ThisKey="ID", OtherKey="AccidentTypeID")]
		public EntitySet<tblAccident> tblAccidents
		{
			get
			{
				return this._tblAccidents;
			}
			set
			{
				this._tblAccidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblAccidentsType = this;
		}
		
		private void detach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblAccidentsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAccounts")]
	public partial class tblAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _CountryID;
		
		private EntitySet<tblUser> _tblUsers;
		
		private EntitySet<tblAccident> _tblAccidents;
		
		private EntitySet<tblInsurer> _tblInsurers;
		
		private EntitySet<tblDriver> _tblDrivers;
		
		private EntitySet<tblVehicle> _tblVehicles;
		
		private EntityRef<tblCountry> _tblCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public tblAccount()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			this._tblAccidents = new EntitySet<tblAccident>(new Action<tblAccident>(this.attach_tblAccidents), new Action<tblAccident>(this.detach_tblAccidents));
			this._tblInsurers = new EntitySet<tblInsurer>(new Action<tblInsurer>(this.attach_tblInsurers), new Action<tblInsurer>(this.detach_tblInsurers));
			this._tblDrivers = new EntitySet<tblDriver>(new Action<tblDriver>(this.attach_tblDrivers), new Action<tblDriver>(this.detach_tblDrivers));
			this._tblVehicles = new EntitySet<tblVehicle>(new Action<tblVehicle>(this.attach_tblVehicles), new Action<tblVehicle>(this.detach_tblVehicles));
			this._tblCountry = default(EntityRef<tblCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._tblCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblUser", Storage="_tblUsers", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblAccident", Storage="_tblAccidents", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<tblAccident> tblAccidents
		{
			get
			{
				return this._tblAccidents;
			}
			set
			{
				this._tblAccidents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblInsurer", Storage="_tblInsurers", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<tblInsurer> tblInsurers
		{
			get
			{
				return this._tblInsurers;
			}
			set
			{
				this._tblInsurers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblDriver", Storage="_tblDrivers", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<tblDriver> tblDrivers
		{
			get
			{
				return this._tblDrivers;
			}
			set
			{
				this._tblDrivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblVehicle", Storage="_tblVehicles", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<tblVehicle> tblVehicles
		{
			get
			{
				return this._tblVehicles;
			}
			set
			{
				this._tblVehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblAccount", Storage="_tblCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public tblCountry tblCountry
		{
			get
			{
				return this._tblCountry.Entity;
			}
			set
			{
				tblCountry previousValue = this._tblCountry.Entity;
				if (((previousValue != value) 
							|| (this._tblCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCountry.Entity = null;
						previousValue.tblAccounts.Remove(this);
					}
					this._tblCountry.Entity = value;
					if ((value != null))
					{
						value.tblAccounts.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = null;
		}
		
		private void attach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = this;
		}
		
		private void detach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = null;
		}
		
		private void attach_tblInsurers(tblInsurer entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = this;
		}
		
		private void detach_tblInsurers(tblInsurer entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = null;
		}
		
		private void attach_tblDrivers(tblDriver entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = this;
		}
		
		private void detach_tblDrivers(tblDriver entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = null;
		}
		
		private void attach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = this;
		}
		
		private void detach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAction_Controls")]
	public partial class tblAction_Control : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _CaptionHTML;
		
		private EntitySet<tblUsers_Role> _tblUsers_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCaptionHTMLChanging(string value);
    partial void OnCaptionHTMLChanged();
    #endregion
		
		public tblAction_Control()
		{
			this._tblUsers_Roles = new EntitySet<tblUsers_Role>(new Action<tblUsers_Role>(this.attach_tblUsers_Roles), new Action<tblUsers_Role>(this.detach_tblUsers_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaptionHTML", DbType="NVarChar(MAX)")]
		public string CaptionHTML
		{
			get
			{
				return this._CaptionHTML;
			}
			set
			{
				if ((this._CaptionHTML != value))
				{
					this.OnCaptionHTMLChanging(value);
					this.SendPropertyChanging();
					this._CaptionHTML = value;
					this.SendPropertyChanged("CaptionHTML");
					this.OnCaptionHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Control_tblUsers_Role", Storage="_tblUsers_Roles", ThisKey="ID", OtherKey="ControlID")]
		public EntitySet<tblUsers_Role> tblUsers_Roles
		{
			get
			{
				return this._tblUsers_Roles;
			}
			set
			{
				this._tblUsers_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Control = this;
		}
		
		private void detach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Control = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAction_Menu")]
	public partial class tblAction_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _MenuFrom;
		
		private string _DataTable;
		
		private string _Filter;
		
		private string _FilterValue;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _OrderNo;
		
		private EntitySet<tblUsers_Role> _tblUsers_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMenuFromChanging(string value);
    partial void OnMenuFromChanged();
    partial void OnDataTableChanging(string value);
    partial void OnDataTableChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnFilterValueChanging(string value);
    partial void OnFilterValueChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnOrderNoChanging(System.Nullable<int> value);
    partial void OnOrderNoChanged();
    #endregion
		
		public tblAction_Menu()
		{
			this._tblUsers_Roles = new EntitySet<tblUsers_Role>(new Action<tblUsers_Role>(this.attach_tblUsers_Roles), new Action<tblUsers_Role>(this.detach_tblUsers_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuFrom", DbType="NVarChar(50)")]
		public string MenuFrom
		{
			get
			{
				return this._MenuFrom;
			}
			set
			{
				if ((this._MenuFrom != value))
				{
					this.OnMenuFromChanging(value);
					this.SendPropertyChanging();
					this._MenuFrom = value;
					this.SendPropertyChanged("MenuFrom");
					this.OnMenuFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTable", DbType="VarChar(50)")]
		public string DataTable
		{
			get
			{
				return this._DataTable;
			}
			set
			{
				if ((this._DataTable != value))
				{
					this.OnDataTableChanging(value);
					this.SendPropertyChanging();
					this._DataTable = value;
					this.SendPropertyChanged("DataTable");
					this.OnDataTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="VarChar(50)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterValue", DbType="NVarChar(50)")]
		public string FilterValue
		{
			get
			{
				return this._FilterValue;
			}
			set
			{
				if ((this._FilterValue != value))
				{
					this.OnFilterValueChanging(value);
					this.SendPropertyChanging();
					this._FilterValue = value;
					this.SendPropertyChanged("FilterValue");
					this.OnFilterValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int")]
		public System.Nullable<int> OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Menu_tblUsers_Role", Storage="_tblUsers_Roles", ThisKey="ID", OtherKey="MenuID")]
		public EntitySet<tblUsers_Role> tblUsers_Roles
		{
			get
			{
				return this._tblUsers_Roles;
			}
			set
			{
				this._tblUsers_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Menu = this;
		}
		
		private void detach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAction_Tabs")]
	public partial class tblAction_Tab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _OrderNo;
		
		private EntitySet<tblUsers_Role> _tblUsers_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderNoChanging(System.Nullable<int> value);
    partial void OnOrderNoChanged();
    #endregion
		
		public tblAction_Tab()
		{
			this._tblUsers_Roles = new EntitySet<tblUsers_Role>(new Action<tblUsers_Role>(this.attach_tblUsers_Roles), new Action<tblUsers_Role>(this.detach_tblUsers_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int")]
		public System.Nullable<int> OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Tab_tblUsers_Role", Storage="_tblUsers_Roles", ThisKey="ID", OtherKey="TabID")]
		public EntitySet<tblUsers_Role> tblUsers_Roles
		{
			get
			{
				return this._tblUsers_Roles;
			}
			set
			{
				this._tblUsers_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Tab = this;
		}
		
		private void detach_tblUsers_Roles(tblUsers_Role entity)
		{
			this.SendPropertyChanging();
			entity.tblAction_Tab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblActivityTypes")]
	public partial class tblActivityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ActivityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActivityTypeChanging(string value);
    partial void OnActivityTypeChanged();
    #endregion
		
		public tblActivityType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityType", DbType="NVarChar(50)")]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this.OnActivityTypeChanging(value);
					this.SendPropertyChanging();
					this._ActivityType = value;
					this.SendPropertyChanged("ActivityType");
					this.OnActivityTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCountries")]
	public partial class tblCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ISOName;
		
		private EntitySet<tblAccount> _tblAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnISONameChanging(string value);
    partial void OnISONameChanged();
    #endregion
		
		public tblCountry()
		{
			this._tblAccounts = new EntitySet<tblAccount>(new Action<tblAccount>(this.attach_tblAccounts), new Action<tblAccount>(this.detach_tblAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOName", DbType="Char(2)")]
		public string ISOName
		{
			get
			{
				return this._ISOName;
			}
			set
			{
				if ((this._ISOName != value))
				{
					this.OnISONameChanging(value);
					this.SendPropertyChanging();
					this._ISOName = value;
					this.SendPropertyChanged("ISOName");
					this.OnISONameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblAccount", Storage="_tblAccounts", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<tblAccount> tblAccounts
		{
			get
			{
				return this._tblAccounts;
			}
			set
			{
				this._tblAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAccounts(tblAccount entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = this;
		}
		
		private void detach_tblAccounts(tblAccount entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers_PermissionsInRoles")]
	public partial class tblUsers_PermissionsInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _PermisionID;
		
		private EntityRef<tblUsers_Permission> _tblUsers_Permission;
		
		private EntityRef<tblUsers_Role> _tblUsers_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnPermisionIDChanging(int value);
    partial void OnPermisionIDChanged();
    #endregion
		
		public tblUsers_PermissionsInRole()
		{
			this._tblUsers_Permission = default(EntityRef<tblUsers_Permission>);
			this._tblUsers_Role = default(EntityRef<tblUsers_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._tblUsers_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisionID", DbType="Int NOT NULL")]
		public int PermisionID
		{
			get
			{
				return this._PermisionID;
			}
			set
			{
				if ((this._PermisionID != value))
				{
					if (this._tblUsers_Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermisionIDChanging(value);
					this.SendPropertyChanging();
					this._PermisionID = value;
					this.SendPropertyChanged("PermisionID");
					this.OnPermisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Permission_tblUsers_PermissionsInRole", Storage="_tblUsers_Permission", ThisKey="PermisionID", OtherKey="ID", IsForeignKey=true)]
		public tblUsers_Permission tblUsers_Permission
		{
			get
			{
				return this._tblUsers_Permission.Entity;
			}
			set
			{
				tblUsers_Permission previousValue = this._tblUsers_Permission.Entity;
				if (((previousValue != value) 
							|| (this._tblUsers_Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsers_Permission.Entity = null;
						previousValue.tblUsers_PermissionsInRoles.Remove(this);
					}
					this._tblUsers_Permission.Entity = value;
					if ((value != null))
					{
						value.tblUsers_PermissionsInRoles.Add(this);
						this._PermisionID = value.ID;
					}
					else
					{
						this._PermisionID = default(int);
					}
					this.SendPropertyChanged("tblUsers_Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Role_tblUsers_PermissionsInRole", Storage="_tblUsers_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public tblUsers_Role tblUsers_Role
		{
			get
			{
				return this._tblUsers_Role.Entity;
			}
			set
			{
				tblUsers_Role previousValue = this._tblUsers_Role.Entity;
				if (((previousValue != value) 
							|| (this._tblUsers_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsers_Role.Entity = null;
						previousValue.tblUsers_PermissionsInRoles.Remove(this);
					}
					this._tblUsers_Role.Entity = value;
					if ((value != null))
					{
						value.tblUsers_PermissionsInRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("tblUsers_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers_RolesInGroups")]
	public partial class tblUsers_RolesInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleGroupID;
		
		private int _RoleID;
		
		private EntityRef<tblUsers_Role> _tblUsers_Role;
		
		private EntityRef<tblUsers_RolesGroup> _tblUsers_RolesGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleGroupIDChanging(int value);
    partial void OnRoleGroupIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public tblUsers_RolesInGroup()
		{
			this._tblUsers_Role = default(EntityRef<tblUsers_Role>);
			this._tblUsers_RolesGroup = default(EntityRef<tblUsers_RolesGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleGroupID", DbType="Int NOT NULL")]
		public int RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					if (this._tblUsers_RolesGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._tblUsers_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Role_tblUsers_RolesInGroup", Storage="_tblUsers_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public tblUsers_Role tblUsers_Role
		{
			get
			{
				return this._tblUsers_Role.Entity;
			}
			set
			{
				tblUsers_Role previousValue = this._tblUsers_Role.Entity;
				if (((previousValue != value) 
							|| (this._tblUsers_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsers_Role.Entity = null;
						previousValue.tblUsers_RolesInGroups.Remove(this);
					}
					this._tblUsers_Role.Entity = value;
					if ((value != null))
					{
						value.tblUsers_RolesInGroups.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("tblUsers_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_RolesGroup_tblUsers_RolesInGroup", Storage="_tblUsers_RolesGroup", ThisKey="RoleGroupID", OtherKey="ID", IsForeignKey=true)]
		public tblUsers_RolesGroup tblUsers_RolesGroup
		{
			get
			{
				return this._tblUsers_RolesGroup.Entity;
			}
			set
			{
				tblUsers_RolesGroup previousValue = this._tblUsers_RolesGroup.Entity;
				if (((previousValue != value) 
							|| (this._tblUsers_RolesGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsers_RolesGroup.Entity = null;
						previousValue.tblUsers_RolesInGroups.Remove(this);
					}
					this._tblUsers_RolesGroup.Entity = value;
					if ((value != null))
					{
						value.tblUsers_RolesInGroups.Add(this);
						this._RoleGroupID = value.ID;
					}
					else
					{
						this._RoleGroupID = default(int);
					}
					this.SendPropertyChanged("tblUsers_RolesGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _Surname;
		
		private string _Email;
		
		private int _AccountID;
		
		private string _Password;
		
		private int _LanguageID;
		
		private int _RoleGroupID;
		
		private bool _IsAdmin;
		
		private bool _IsActive;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _LastLockOutDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private System.Nullable<int> _FailedPasswordAttemptCount;
		
		private System.Nullable<int> _FailedPassAnswerAttemptCount;
		
		private string _Comment;
		
		private bool _IsDeleted;
		
		private EntitySet<tblUsersActivities_Update> _tblUsersActivities_Updates;
		
		private EntitySet<tblDoc> _tblDocs;
		
		private EntitySet<tblInsPolicy> _tblInsPolicies;
		
		private EntityRef<tblAccount> _tblAccount;
		
		private EntityRef<tblUsers_RolesGroup> _tblUsers_RolesGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnRoleGroupIDChanging(int value);
    partial void OnRoleGroupIDChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLastLockOutDateChanging(System.DateTime value);
    partial void OnLastLockOutDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnFailedPasswordAttemptCountChanging(System.Nullable<int> value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPassAnswerAttemptCountChanging(System.Nullable<int> value);
    partial void OnFailedPassAnswerAttemptCountChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblUser()
		{
			this._tblUsersActivities_Updates = new EntitySet<tblUsersActivities_Update>(new Action<tblUsersActivities_Update>(this.attach_tblUsersActivities_Updates), new Action<tblUsersActivities_Update>(this.detach_tblUsersActivities_Updates));
			this._tblDocs = new EntitySet<tblDoc>(new Action<tblDoc>(this.attach_tblDocs), new Action<tblDoc>(this.detach_tblDocs));
			this._tblInsPolicies = new EntitySet<tblInsPolicy>(new Action<tblInsPolicy>(this.attach_tblInsPolicies), new Action<tblInsPolicy>(this.detach_tblInsPolicies));
			this._tblAccount = default(EntityRef<tblAccount>);
			this._tblUsers_RolesGroup = default(EntityRef<tblUsers_RolesGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._tblAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleGroupID", DbType="Int NOT NULL")]
		public int RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					if (this._tblUsers_RolesGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockOutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockOutDate
		{
			get
			{
				return this._LastLockOutDate;
			}
			set
			{
				if ((this._LastLockOutDate != value))
				{
					this.OnLastLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockOutDate = value;
					this.SendPropertyChanged("LastLockOutDate");
					this.OnLastLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(200)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(100)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int")]
		public System.Nullable<int> FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPassAnswerAttemptCount", DbType="Int")]
		public System.Nullable<int> FailedPassAnswerAttemptCount
		{
			get
			{
				return this._FailedPassAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPassAnswerAttemptCount != value))
				{
					this.OnFailedPassAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPassAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPassAnswerAttemptCount");
					this.OnFailedPassAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUsersActivities_Update", Storage="_tblUsersActivities_Updates", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<tblUsersActivities_Update> tblUsersActivities_Updates
		{
			get
			{
				return this._tblUsersActivities_Updates;
			}
			set
			{
				this._tblUsersActivities_Updates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblDoc", Storage="_tblDocs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<tblDoc> tblDocs
		{
			get
			{
				return this._tblDocs;
			}
			set
			{
				this._tblDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblInsPolicy", Storage="_tblInsPolicies", ThisKey="ID", OtherKey="InsuredContactID")]
		public EntitySet<tblInsPolicy> tblInsPolicies
		{
			get
			{
				return this._tblInsPolicies;
			}
			set
			{
				this._tblInsPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblUser", Storage="_tblAccount", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblAccount tblAccount
		{
			get
			{
				return this._tblAccount.Entity;
			}
			set
			{
				tblAccount previousValue = this._tblAccount.Entity;
				if (((previousValue != value) 
							|| (this._tblAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccount.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblAccount.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("tblAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_RolesGroup_tblUser", Storage="_tblUsers_RolesGroup", ThisKey="RoleGroupID", OtherKey="ID", IsForeignKey=true)]
		public tblUsers_RolesGroup tblUsers_RolesGroup
		{
			get
			{
				return this._tblUsers_RolesGroup.Entity;
			}
			set
			{
				tblUsers_RolesGroup previousValue = this._tblUsers_RolesGroup.Entity;
				if (((previousValue != value) 
							|| (this._tblUsers_RolesGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsers_RolesGroup.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblUsers_RolesGroup.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._RoleGroupID = value.ID;
					}
					else
					{
						this._RoleGroupID = default(int);
					}
					this.SendPropertyChanged("tblUsers_RolesGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsersActivities_Updates(tblUsersActivities_Update entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblUsersActivities_Updates(tblUsersActivities_Update entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblDocs(tblDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblDocs(tblDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers_Permissions")]
	public partial class tblUsers_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _IsDeleted;
		
		private EntitySet<tblUsers_PermissionsInRole> _tblUsers_PermissionsInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblUsers_Permission()
		{
			this._tblUsers_PermissionsInRoles = new EntitySet<tblUsers_PermissionsInRole>(new Action<tblUsers_PermissionsInRole>(this.attach_tblUsers_PermissionsInRoles), new Action<tblUsers_PermissionsInRole>(this.detach_tblUsers_PermissionsInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Permission_tblUsers_PermissionsInRole", Storage="_tblUsers_PermissionsInRoles", ThisKey="ID", OtherKey="PermisionID")]
		public EntitySet<tblUsers_PermissionsInRole> tblUsers_PermissionsInRoles
		{
			get
			{
				return this._tblUsers_PermissionsInRoles;
			}
			set
			{
				this._tblUsers_PermissionsInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_PermissionsInRoles(tblUsers_PermissionsInRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Permission = this;
		}
		
		private void detach_tblUsers_PermissionsInRoles(tblUsers_PermissionsInRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers_Roles")]
	public partial class tblUsers_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _TabID;
		
		private System.Nullable<int> _MenuID;
		
		private System.Nullable<int> _ControlID;
		
		private bool _IsDeleted;
		
		private EntitySet<tblUsers_PermissionsInRole> _tblUsers_PermissionsInRoles;
		
		private EntitySet<tblUsers_RolesInGroup> _tblUsers_RolesInGroups;
		
		private EntityRef<tblAction_Control> _tblAction_Control;
		
		private EntityRef<tblAction_Menu> _tblAction_Menu;
		
		private EntityRef<tblAction_Tab> _tblAction_Tab;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTabIDChanging(System.Nullable<int> value);
    partial void OnTabIDChanged();
    partial void OnMenuIDChanging(System.Nullable<int> value);
    partial void OnMenuIDChanged();
    partial void OnControlIDChanging(System.Nullable<int> value);
    partial void OnControlIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblUsers_Role()
		{
			this._tblUsers_PermissionsInRoles = new EntitySet<tblUsers_PermissionsInRole>(new Action<tblUsers_PermissionsInRole>(this.attach_tblUsers_PermissionsInRoles), new Action<tblUsers_PermissionsInRole>(this.detach_tblUsers_PermissionsInRoles));
			this._tblUsers_RolesInGroups = new EntitySet<tblUsers_RolesInGroup>(new Action<tblUsers_RolesInGroup>(this.attach_tblUsers_RolesInGroups), new Action<tblUsers_RolesInGroup>(this.detach_tblUsers_RolesInGroups));
			this._tblAction_Control = default(EntityRef<tblAction_Control>);
			this._tblAction_Menu = default(EntityRef<tblAction_Menu>);
			this._tblAction_Tab = default(EntityRef<tblAction_Tab>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabID", DbType="Int")]
		public System.Nullable<int> TabID
		{
			get
			{
				return this._TabID;
			}
			set
			{
				if ((this._TabID != value))
				{
					if (this._tblAction_Tab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTabIDChanging(value);
					this.SendPropertyChanging();
					this._TabID = value;
					this.SendPropertyChanged("TabID");
					this.OnTabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int")]
		public System.Nullable<int> MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._tblAction_Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlID", DbType="Int")]
		public System.Nullable<int> ControlID
		{
			get
			{
				return this._ControlID;
			}
			set
			{
				if ((this._ControlID != value))
				{
					if (this._tblAction_Control.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIDChanging(value);
					this.SendPropertyChanging();
					this._ControlID = value;
					this.SendPropertyChanged("ControlID");
					this.OnControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Role_tblUsers_PermissionsInRole", Storage="_tblUsers_PermissionsInRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<tblUsers_PermissionsInRole> tblUsers_PermissionsInRoles
		{
			get
			{
				return this._tblUsers_PermissionsInRoles;
			}
			set
			{
				this._tblUsers_PermissionsInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_Role_tblUsers_RolesInGroup", Storage="_tblUsers_RolesInGroups", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<tblUsers_RolesInGroup> tblUsers_RolesInGroups
		{
			get
			{
				return this._tblUsers_RolesInGroups;
			}
			set
			{
				this._tblUsers_RolesInGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Control_tblUsers_Role", Storage="_tblAction_Control", ThisKey="ControlID", OtherKey="ID", IsForeignKey=true)]
		public tblAction_Control tblAction_Control
		{
			get
			{
				return this._tblAction_Control.Entity;
			}
			set
			{
				tblAction_Control previousValue = this._tblAction_Control.Entity;
				if (((previousValue != value) 
							|| (this._tblAction_Control.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAction_Control.Entity = null;
						previousValue.tblUsers_Roles.Remove(this);
					}
					this._tblAction_Control.Entity = value;
					if ((value != null))
					{
						value.tblUsers_Roles.Add(this);
						this._ControlID = value.ID;
					}
					else
					{
						this._ControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblAction_Control");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Menu_tblUsers_Role", Storage="_tblAction_Menu", ThisKey="MenuID", OtherKey="ID", IsForeignKey=true)]
		public tblAction_Menu tblAction_Menu
		{
			get
			{
				return this._tblAction_Menu.Entity;
			}
			set
			{
				tblAction_Menu previousValue = this._tblAction_Menu.Entity;
				if (((previousValue != value) 
							|| (this._tblAction_Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAction_Menu.Entity = null;
						previousValue.tblUsers_Roles.Remove(this);
					}
					this._tblAction_Menu.Entity = value;
					if ((value != null))
					{
						value.tblUsers_Roles.Add(this);
						this._MenuID = value.ID;
					}
					else
					{
						this._MenuID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblAction_Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAction_Tab_tblUsers_Role", Storage="_tblAction_Tab", ThisKey="TabID", OtherKey="ID", IsForeignKey=true)]
		public tblAction_Tab tblAction_Tab
		{
			get
			{
				return this._tblAction_Tab.Entity;
			}
			set
			{
				tblAction_Tab previousValue = this._tblAction_Tab.Entity;
				if (((previousValue != value) 
							|| (this._tblAction_Tab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAction_Tab.Entity = null;
						previousValue.tblUsers_Roles.Remove(this);
					}
					this._tblAction_Tab.Entity = value;
					if ((value != null))
					{
						value.tblUsers_Roles.Add(this);
						this._TabID = value.ID;
					}
					else
					{
						this._TabID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblAction_Tab");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_PermissionsInRoles(tblUsers_PermissionsInRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Role = this;
		}
		
		private void detach_tblUsers_PermissionsInRoles(tblUsers_PermissionsInRole entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Role = null;
		}
		
		private void attach_tblUsers_RolesInGroups(tblUsers_RolesInGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Role = this;
		}
		
		private void detach_tblUsers_RolesInGroups(tblUsers_RolesInGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsers_RolesGroups")]
	public partial class tblUsers_RolesGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _IsDeleted;
		
		private EntitySet<tblUsers_RolesInGroup> _tblUsers_RolesInGroups;
		
		private EntitySet<tblUser> _tblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblUsers_RolesGroup()
		{
			this._tblUsers_RolesInGroups = new EntitySet<tblUsers_RolesInGroup>(new Action<tblUsers_RolesInGroup>(this.attach_tblUsers_RolesInGroups), new Action<tblUsers_RolesInGroup>(this.detach_tblUsers_RolesInGroups));
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_RolesGroup_tblUsers_RolesInGroup", Storage="_tblUsers_RolesInGroups", ThisKey="ID", OtherKey="RoleGroupID")]
		public EntitySet<tblUsers_RolesInGroup> tblUsers_RolesInGroups
		{
			get
			{
				return this._tblUsers_RolesInGroups;
			}
			set
			{
				this._tblUsers_RolesInGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsers_RolesGroup_tblUser", Storage="_tblUsers", ThisKey="ID", OtherKey="RoleGroupID")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers_RolesInGroups(tblUsers_RolesInGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_RolesGroup = this;
		}
		
		private void detach_tblUsers_RolesInGroups(tblUsers_RolesInGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_RolesGroup = null;
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_RolesGroup = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblUsers_RolesGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsersActivities_Updates")]
	public partial class tblUsersActivities_Update : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RecordID;
		
		private int _TableID;
		
		private int _UserID;
		
		private System.DateTime _Date;
		
		private byte _Action;
		
		private EntitySet<tblUsersActivities_EditedCol> _tblUsersActivities_EditedCols;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnActionChanging(byte value);
    partial void OnActionChanged();
    #endregion
		
		public tblUsersActivities_Update()
		{
			this._tblUsersActivities_EditedCols = new EntitySet<tblUsersActivities_EditedCol>(new Action<tblUsersActivities_EditedCol>(this.attach_tblUsersActivities_EditedCols), new Action<tblUsersActivities_EditedCol>(this.detach_tblUsersActivities_EditedCols));
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", DbType="Int NOT NULL")]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="TinyInt NOT NULL")]
		public byte Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsersActivities_Update_tblUsersActivities_EditedCol", Storage="_tblUsersActivities_EditedCols", ThisKey="ID", OtherKey="UpdateID")]
		public EntitySet<tblUsersActivities_EditedCol> tblUsersActivities_EditedCols
		{
			get
			{
				return this._tblUsersActivities_EditedCols;
			}
			set
			{
				this._tblUsersActivities_EditedCols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUsersActivities_Update", Storage="_tblUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblUsersActivities_Updates.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblUsersActivities_Updates.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsersActivities_EditedCols(tblUsersActivities_EditedCol entity)
		{
			this.SendPropertyChanging();
			entity.tblUsersActivities_Update = this;
		}
		
		private void detach_tblUsersActivities_EditedCols(tblUsersActivities_EditedCol entity)
		{
			this.SendPropertyChanging();
			entity.tblUsersActivities_Update = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUsersActivities_EditedCols")]
	public partial class tblUsersActivities_EditedCol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UpdateID;
		
		private string _OldVal;
		
		private string _FieldName;
		
		private EntityRef<tblUsersActivities_Update> _tblUsersActivities_Update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUpdateIDChanging(int value);
    partial void OnUpdateIDChanged();
    partial void OnOldValChanging(string value);
    partial void OnOldValChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    #endregion
		
		public tblUsersActivities_EditedCol()
		{
			this._tblUsersActivities_Update = default(EntityRef<tblUsersActivities_Update>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateID", DbType="Int NOT NULL")]
		public int UpdateID
		{
			get
			{
				return this._UpdateID;
			}
			set
			{
				if ((this._UpdateID != value))
				{
					if (this._tblUsersActivities_Update.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateIDChanging(value);
					this.SendPropertyChanging();
					this._UpdateID = value;
					this.SendPropertyChanged("UpdateID");
					this.OnUpdateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldVal", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OldVal
		{
			get
			{
				return this._OldVal;
			}
			set
			{
				if ((this._OldVal != value))
				{
					this.OnOldValChanging(value);
					this.SendPropertyChanging();
					this._OldVal = value;
					this.SendPropertyChanged("OldVal");
					this.OnOldValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUsersActivities_Update_tblUsersActivities_EditedCol", Storage="_tblUsersActivities_Update", ThisKey="UpdateID", OtherKey="ID", IsForeignKey=true)]
		public tblUsersActivities_Update tblUsersActivities_Update
		{
			get
			{
				return this._tblUsersActivities_Update.Entity;
			}
			set
			{
				tblUsersActivities_Update previousValue = this._tblUsersActivities_Update.Entity;
				if (((previousValue != value) 
							|| (this._tblUsersActivities_Update.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUsersActivities_Update.Entity = null;
						previousValue.tblUsersActivities_EditedCols.Remove(this);
					}
					this._tblUsersActivities_Update.Entity = value;
					if ((value != null))
					{
						value.tblUsersActivities_EditedCols.Add(this);
						this._UpdateID = value.ID;
					}
					else
					{
						this._UpdateID = default(int);
					}
					this.SendPropertyChanged("tblUsersActivities_Update");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAccidents")]
	public partial class tblAccident : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AccidentTypeID;
		
		private int _AccountID;
		
		private int _DriverID;
		
		private int _No;
		
		private System.DateTime _Date;
		
		private bool _IsNotOurFault;
		
		private bool _IsOtherParticipants;
		
		private string _ShortNote;
		
		private string _LongNote;
		
		private string _LocationCountry;
		
		private string _LocationAddress;
		
		private string _LocationDistrict;
		
		private decimal _Lat;
		
		private decimal _Lng;
		
		private int _GMT;
		
		private bool _IsDeleted;
		
		private EntitySet<tblClaim> _tblClaims;
		
		private EntityRef<tblAccidentsType> _tblAccidentsType;
		
		private EntityRef<tblAccount> _tblAccount;
		
		private EntityRef<tblDriver> _tblDriver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccidentTypeIDChanging(int value);
    partial void OnAccidentTypeIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnDriverIDChanging(int value);
    partial void OnDriverIDChanged();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsNotOurFaultChanging(bool value);
    partial void OnIsNotOurFaultChanged();
    partial void OnIsOtherParticipantsChanging(bool value);
    partial void OnIsOtherParticipantsChanged();
    partial void OnShortNoteChanging(string value);
    partial void OnShortNoteChanged();
    partial void OnLongNoteChanging(string value);
    partial void OnLongNoteChanged();
    partial void OnLocationCountryChanging(string value);
    partial void OnLocationCountryChanged();
    partial void OnLocationAddressChanging(string value);
    partial void OnLocationAddressChanged();
    partial void OnLocationDistrictChanging(string value);
    partial void OnLocationDistrictChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLngChanging(decimal value);
    partial void OnLngChanged();
    partial void OnGMTChanging(int value);
    partial void OnGMTChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblAccident()
		{
			this._tblClaims = new EntitySet<tblClaim>(new Action<tblClaim>(this.attach_tblClaims), new Action<tblClaim>(this.detach_tblClaims));
			this._tblAccidentsType = default(EntityRef<tblAccidentsType>);
			this._tblAccount = default(EntityRef<tblAccount>);
			this._tblDriver = default(EntityRef<tblDriver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccidentTypeID", DbType="Int NOT NULL")]
		public int AccidentTypeID
		{
			get
			{
				return this._AccidentTypeID;
			}
			set
			{
				if ((this._AccidentTypeID != value))
				{
					if (this._tblAccidentsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccidentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AccidentTypeID = value;
					this.SendPropertyChanged("AccidentTypeID");
					this.OnAccidentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._tblAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="Int NOT NULL")]
		public int DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._tblDriver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNotOurFault", DbType="Bit NOT NULL")]
		public bool IsNotOurFault
		{
			get
			{
				return this._IsNotOurFault;
			}
			set
			{
				if ((this._IsNotOurFault != value))
				{
					this.OnIsNotOurFaultChanging(value);
					this.SendPropertyChanging();
					this._IsNotOurFault = value;
					this.SendPropertyChanged("IsNotOurFault");
					this.OnIsNotOurFaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOtherParticipants", DbType="Bit NOT NULL")]
		public bool IsOtherParticipants
		{
			get
			{
				return this._IsOtherParticipants;
			}
			set
			{
				if ((this._IsOtherParticipants != value))
				{
					this.OnIsOtherParticipantsChanging(value);
					this.SendPropertyChanging();
					this._IsOtherParticipants = value;
					this.SendPropertyChanged("IsOtherParticipants");
					this.OnIsOtherParticipantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortNote", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortNote
		{
			get
			{
				return this._ShortNote;
			}
			set
			{
				if ((this._ShortNote != value))
				{
					this.OnShortNoteChanging(value);
					this.SendPropertyChanging();
					this._ShortNote = value;
					this.SendPropertyChanged("ShortNote");
					this.OnShortNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongNote", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string LongNote
		{
			get
			{
				return this._LongNote;
			}
			set
			{
				if ((this._LongNote != value))
				{
					this.OnLongNoteChanging(value);
					this.SendPropertyChanging();
					this._LongNote = value;
					this.SendPropertyChanged("LongNote");
					this.OnLongNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCountry", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationCountry
		{
			get
			{
				return this._LocationCountry;
			}
			set
			{
				if ((this._LocationCountry != value))
				{
					this.OnLocationCountryChanging(value);
					this.SendPropertyChanging();
					this._LocationCountry = value;
					this.SendPropertyChanged("LocationCountry");
					this.OnLocationCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LocationAddress
		{
			get
			{
				return this._LocationAddress;
			}
			set
			{
				if ((this._LocationAddress != value))
				{
					this.OnLocationAddressChanging(value);
					this.SendPropertyChanging();
					this._LocationAddress = value;
					this.SendPropertyChanged("LocationAddress");
					this.OnLocationAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationDistrict", DbType="NVarChar(80)")]
		public string LocationDistrict
		{
			get
			{
				return this._LocationDistrict;
			}
			set
			{
				if ((this._LocationDistrict != value))
				{
					this.OnLocationDistrictChanging(value);
					this.SendPropertyChanging();
					this._LocationDistrict = value;
					this.SendPropertyChanged("LocationDistrict");
					this.OnLocationDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(10,8) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Decimal(10,8) NOT NULL")]
		public decimal Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GMT", DbType="Int NOT NULL")]
		public int GMT
		{
			get
			{
				return this._GMT;
			}
			set
			{
				if ((this._GMT != value))
				{
					this.OnGMTChanging(value);
					this.SendPropertyChanging();
					this._GMT = value;
					this.SendPropertyChanged("GMT");
					this.OnGMTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccident_tblClaim", Storage="_tblClaims", ThisKey="ID", OtherKey="AccidentID")]
		public EntitySet<tblClaim> tblClaims
		{
			get
			{
				return this._tblClaims;
			}
			set
			{
				this._tblClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccidentsType_tblAccident", Storage="_tblAccidentsType", ThisKey="AccidentTypeID", OtherKey="ID", IsForeignKey=true)]
		public tblAccidentsType tblAccidentsType
		{
			get
			{
				return this._tblAccidentsType.Entity;
			}
			set
			{
				tblAccidentsType previousValue = this._tblAccidentsType.Entity;
				if (((previousValue != value) 
							|| (this._tblAccidentsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccidentsType.Entity = null;
						previousValue.tblAccidents.Remove(this);
					}
					this._tblAccidentsType.Entity = value;
					if ((value != null))
					{
						value.tblAccidents.Add(this);
						this._AccidentTypeID = value.ID;
					}
					else
					{
						this._AccidentTypeID = default(int);
					}
					this.SendPropertyChanged("tblAccidentsType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblAccident", Storage="_tblAccount", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public tblAccount tblAccount
		{
			get
			{
				return this._tblAccount.Entity;
			}
			set
			{
				tblAccount previousValue = this._tblAccount.Entity;
				if (((previousValue != value) 
							|| (this._tblAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccount.Entity = null;
						previousValue.tblAccidents.Remove(this);
					}
					this._tblAccount.Entity = value;
					if ((value != null))
					{
						value.tblAccidents.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("tblAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDriver_tblAccident", Storage="_tblDriver", ThisKey="DriverID", OtherKey="ID", IsForeignKey=true)]
		public tblDriver tblDriver
		{
			get
			{
				return this._tblDriver.Entity;
			}
			set
			{
				tblDriver previousValue = this._tblDriver.Entity;
				if (((previousValue != value) 
							|| (this._tblDriver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDriver.Entity = null;
						previousValue.tblAccidents.Remove(this);
					}
					this._tblDriver.Entity = value;
					if ((value != null))
					{
						value.tblAccidents.Add(this);
						this._DriverID = value.ID;
					}
					else
					{
						this._DriverID = default(int);
					}
					this.SendPropertyChanged("tblDriver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblAccident = this;
		}
		
		private void detach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblAccident = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClaimTypes")]
	public partial class tblClaimType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblClaim> _tblClaims;
		
		private EntitySet<tblInsPolicy> _tblInsPolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblClaimType()
		{
			this._tblClaims = new EntitySet<tblClaim>(new Action<tblClaim>(this.attach_tblClaims), new Action<tblClaim>(this.detach_tblClaims));
			this._tblInsPolicies = new EntitySet<tblInsPolicy>(new Action<tblInsPolicy>(this.attach_tblInsPolicies), new Action<tblInsPolicy>(this.detach_tblInsPolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClaimType_tblClaim", Storage="_tblClaims", ThisKey="ID", OtherKey="ClaimTypeID")]
		public EntitySet<tblClaim> tblClaims
		{
			get
			{
				return this._tblClaims;
			}
			set
			{
				this._tblClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClaimType_tblInsPolicy", Storage="_tblInsPolicies", ThisKey="ID", OtherKey="ClaimTypeID")]
		public EntitySet<tblInsPolicy> tblInsPolicies
		{
			get
			{
				return this._tblInsPolicies;
			}
			set
			{
				this._tblInsPolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblClaimType = this;
		}
		
		private void detach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblClaimType = null;
		}
		
		private void attach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblClaimType = this;
		}
		
		private void detach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblClaimType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblInsurers")]
	public partial class tblInsurer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CountryID;
		
		private int _CountryDefault;
		
		private int _AccountID;
		
		private bool _IsDeleted;
		
		private EntitySet<tblInsPolicy> _tblInsPolicies;
		
		private EntityRef<tblAccount> _tblAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryDefaultChanging(int value);
    partial void OnCountryDefaultChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblInsurer()
		{
			this._tblInsPolicies = new EntitySet<tblInsPolicy>(new Action<tblInsPolicy>(this.attach_tblInsPolicies), new Action<tblInsPolicy>(this.detach_tblInsPolicies));
			this._tblAccount = default(EntityRef<tblAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryDefault", DbType="Int NOT NULL")]
		public int CountryDefault
		{
			get
			{
				return this._CountryDefault;
			}
			set
			{
				if ((this._CountryDefault != value))
				{
					this.OnCountryDefaultChanging(value);
					this.SendPropertyChanging();
					this._CountryDefault = value;
					this.SendPropertyChanged("CountryDefault");
					this.OnCountryDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._tblAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsurer_tblInsPolicy", Storage="_tblInsPolicies", ThisKey="ID", OtherKey="InsurerID")]
		public EntitySet<tblInsPolicy> tblInsPolicies
		{
			get
			{
				return this._tblInsPolicies;
			}
			set
			{
				this._tblInsPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblInsurer", Storage="_tblAccount", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public tblAccount tblAccount
		{
			get
			{
				return this._tblAccount.Entity;
			}
			set
			{
				tblAccount previousValue = this._tblAccount.Entity;
				if (((previousValue != value) 
							|| (this._tblAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccount.Entity = null;
						previousValue.tblInsurers.Remove(this);
					}
					this._tblAccount.Entity = value;
					if ((value != null))
					{
						value.tblInsurers.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("tblAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblInsurer = this;
		}
		
		private void detach_tblInsPolicies(tblInsPolicy entity)
		{
			this.SendPropertyChanging();
			entity.tblInsurer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClaims")]
	public partial class tblClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ClaimTypeID;
		
		private int _AccidentID;
		
		private System.Nullable<int> _InsPolicyID;
		
		private int _VehicleID;
		
		private int _No;
		
		private System.Nullable<bool> _IsTotalLoss;
		
		private double _LossAmount;
		
		private System.Nullable<double> _InsuranceClaimAmount;
		
		private System.Nullable<bool> _IsInjuredPersons;
		
		private string _InsurerClaimID;
		
		private int _ClaimStatus;
		
		private bool _AmountIsConfirmed;
		
		private System.Nullable<int> _Days;
		
		private System.Nullable<double> _PerDay;
		
		private bool _IsDeleted;
		
		private EntityRef<tblAccident> _tblAccident;
		
		private EntityRef<tblClaimType> _tblClaimType;
		
		private EntityRef<tblVehicle> _tblVehicle;
		
		private EntityRef<tblInsPolicy> _tblInsPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClaimTypeIDChanging(int value);
    partial void OnClaimTypeIDChanged();
    partial void OnAccidentIDChanging(int value);
    partial void OnAccidentIDChanged();
    partial void OnInsPolicyIDChanging(System.Nullable<int> value);
    partial void OnInsPolicyIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnIsTotalLossChanging(System.Nullable<bool> value);
    partial void OnIsTotalLossChanged();
    partial void OnLossAmountChanging(double value);
    partial void OnLossAmountChanged();
    partial void OnInsuranceClaimAmountChanging(System.Nullable<double> value);
    partial void OnInsuranceClaimAmountChanged();
    partial void OnIsInjuredPersonsChanging(System.Nullable<bool> value);
    partial void OnIsInjuredPersonsChanged();
    partial void OnInsurerClaimIDChanging(string value);
    partial void OnInsurerClaimIDChanged();
    partial void OnClaimStatusChanging(int value);
    partial void OnClaimStatusChanged();
    partial void OnAmountIsConfirmedChanging(bool value);
    partial void OnAmountIsConfirmedChanged();
    partial void OnDaysChanging(System.Nullable<int> value);
    partial void OnDaysChanged();
    partial void OnPerDayChanging(System.Nullable<double> value);
    partial void OnPerDayChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblClaim()
		{
			this._tblAccident = default(EntityRef<tblAccident>);
			this._tblClaimType = default(EntityRef<tblClaimType>);
			this._tblVehicle = default(EntityRef<tblVehicle>);
			this._tblInsPolicy = default(EntityRef<tblInsPolicy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimTypeID", DbType="Int NOT NULL")]
		public int ClaimTypeID
		{
			get
			{
				return this._ClaimTypeID;
			}
			set
			{
				if ((this._ClaimTypeID != value))
				{
					if (this._tblClaimType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClaimTypeID = value;
					this.SendPropertyChanged("ClaimTypeID");
					this.OnClaimTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccidentID", DbType="Int NOT NULL")]
		public int AccidentID
		{
			get
			{
				return this._AccidentID;
			}
			set
			{
				if ((this._AccidentID != value))
				{
					if (this._tblAccident.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccidentIDChanging(value);
					this.SendPropertyChanging();
					this._AccidentID = value;
					this.SendPropertyChanged("AccidentID");
					this.OnAccidentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsPolicyID", DbType="Int")]
		public System.Nullable<int> InsPolicyID
		{
			get
			{
				return this._InsPolicyID;
			}
			set
			{
				if ((this._InsPolicyID != value))
				{
					if (this._tblInsPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._InsPolicyID = value;
					this.SendPropertyChanged("InsPolicyID");
					this.OnInsPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					if (this._tblVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTotalLoss", DbType="Bit")]
		public System.Nullable<bool> IsTotalLoss
		{
			get
			{
				return this._IsTotalLoss;
			}
			set
			{
				if ((this._IsTotalLoss != value))
				{
					this.OnIsTotalLossChanging(value);
					this.SendPropertyChanging();
					this._IsTotalLoss = value;
					this.SendPropertyChanged("IsTotalLoss");
					this.OnIsTotalLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossAmount", DbType="Float NOT NULL")]
		public double LossAmount
		{
			get
			{
				return this._LossAmount;
			}
			set
			{
				if ((this._LossAmount != value))
				{
					this.OnLossAmountChanging(value);
					this.SendPropertyChanging();
					this._LossAmount = value;
					this.SendPropertyChanged("LossAmount");
					this.OnLossAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceClaimAmount", DbType="Float")]
		public System.Nullable<double> InsuranceClaimAmount
		{
			get
			{
				return this._InsuranceClaimAmount;
			}
			set
			{
				if ((this._InsuranceClaimAmount != value))
				{
					this.OnInsuranceClaimAmountChanging(value);
					this.SendPropertyChanging();
					this._InsuranceClaimAmount = value;
					this.SendPropertyChanged("InsuranceClaimAmount");
					this.OnInsuranceClaimAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInjuredPersons", DbType="Bit")]
		public System.Nullable<bool> IsInjuredPersons
		{
			get
			{
				return this._IsInjuredPersons;
			}
			set
			{
				if ((this._IsInjuredPersons != value))
				{
					this.OnIsInjuredPersonsChanging(value);
					this.SendPropertyChanging();
					this._IsInjuredPersons = value;
					this.SendPropertyChanged("IsInjuredPersons");
					this.OnIsInjuredPersonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurerClaimID", DbType="NVarChar(50)")]
		public string InsurerClaimID
		{
			get
			{
				return this._InsurerClaimID;
			}
			set
			{
				if ((this._InsurerClaimID != value))
				{
					this.OnInsurerClaimIDChanging(value);
					this.SendPropertyChanging();
					this._InsurerClaimID = value;
					this.SendPropertyChanged("InsurerClaimID");
					this.OnInsurerClaimIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimStatus", DbType="Int NOT NULL")]
		public int ClaimStatus
		{
			get
			{
				return this._ClaimStatus;
			}
			set
			{
				if ((this._ClaimStatus != value))
				{
					this.OnClaimStatusChanging(value);
					this.SendPropertyChanging();
					this._ClaimStatus = value;
					this.SendPropertyChanged("ClaimStatus");
					this.OnClaimStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountIsConfirmed", DbType="Bit NOT NULL")]
		public bool AmountIsConfirmed
		{
			get
			{
				return this._AmountIsConfirmed;
			}
			set
			{
				if ((this._AmountIsConfirmed != value))
				{
					this.OnAmountIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._AmountIsConfirmed = value;
					this.SendPropertyChanged("AmountIsConfirmed");
					this.OnAmountIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="Int")]
		public System.Nullable<int> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerDay", DbType="Float")]
		public System.Nullable<double> PerDay
		{
			get
			{
				return this._PerDay;
			}
			set
			{
				if ((this._PerDay != value))
				{
					this.OnPerDayChanging(value);
					this.SendPropertyChanging();
					this._PerDay = value;
					this.SendPropertyChanged("PerDay");
					this.OnPerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccident_tblClaim", Storage="_tblAccident", ThisKey="AccidentID", OtherKey="ID", IsForeignKey=true)]
		public tblAccident tblAccident
		{
			get
			{
				return this._tblAccident.Entity;
			}
			set
			{
				tblAccident previousValue = this._tblAccident.Entity;
				if (((previousValue != value) 
							|| (this._tblAccident.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccident.Entity = null;
						previousValue.tblClaims.Remove(this);
					}
					this._tblAccident.Entity = value;
					if ((value != null))
					{
						value.tblClaims.Add(this);
						this._AccidentID = value.ID;
					}
					else
					{
						this._AccidentID = default(int);
					}
					this.SendPropertyChanged("tblAccident");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClaimType_tblClaim", Storage="_tblClaimType", ThisKey="ClaimTypeID", OtherKey="ID", IsForeignKey=true)]
		public tblClaimType tblClaimType
		{
			get
			{
				return this._tblClaimType.Entity;
			}
			set
			{
				tblClaimType previousValue = this._tblClaimType.Entity;
				if (((previousValue != value) 
							|| (this._tblClaimType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClaimType.Entity = null;
						previousValue.tblClaims.Remove(this);
					}
					this._tblClaimType.Entity = value;
					if ((value != null))
					{
						value.tblClaims.Add(this);
						this._ClaimTypeID = value.ID;
					}
					else
					{
						this._ClaimTypeID = default(int);
					}
					this.SendPropertyChanged("tblClaimType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicle_tblClaim", Storage="_tblVehicle", ThisKey="VehicleID", OtherKey="ID", IsForeignKey=true)]
		public tblVehicle tblVehicle
		{
			get
			{
				return this._tblVehicle.Entity;
			}
			set
			{
				tblVehicle previousValue = this._tblVehicle.Entity;
				if (((previousValue != value) 
							|| (this._tblVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblVehicle.Entity = null;
						previousValue.tblClaims.Remove(this);
					}
					this._tblVehicle.Entity = value;
					if ((value != null))
					{
						value.tblClaims.Add(this);
						this._VehicleID = value.ID;
					}
					else
					{
						this._VehicleID = default(int);
					}
					this.SendPropertyChanged("tblVehicle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblClaim", Storage="_tblInsPolicy", ThisKey="InsPolicyID", OtherKey="ID", IsForeignKey=true)]
		public tblInsPolicy tblInsPolicy
		{
			get
			{
				return this._tblInsPolicy.Entity;
			}
			set
			{
				tblInsPolicy previousValue = this._tblInsPolicy.Entity;
				if (((previousValue != value) 
							|| (this._tblInsPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblInsPolicy.Entity = null;
						previousValue.tblClaims.Remove(this);
					}
					this._tblInsPolicy.Entity = value;
					if ((value != null))
					{
						value.tblClaims.Add(this);
						this._InsPolicyID = value.ID;
					}
					else
					{
						this._InsPolicyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblInsPolicy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDrivers")]
	public partial class tblDriver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateExpierence;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private string _DrivingCategory;
		
		private string _Phone;
		
		private int _AccountID;
		
		private bool _IsDeleted;
		
		private EntitySet<tblAccident> _tblAccidents;
		
		private EntityRef<tblAccount> _tblAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateExpierenceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateExpierenceChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDrivingCategoryChanging(string value);
    partial void OnDrivingCategoryChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblDriver()
		{
			this._tblAccidents = new EntitySet<tblAccident>(new Action<tblAccident>(this.attach_tblAccidents), new Action<tblAccident>(this.detach_tblAccidents));
			this._tblAccount = default(EntityRef<tblAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateExpierence", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateExpierence
		{
			get
			{
				return this._DateExpierence;
			}
			set
			{
				if ((this._DateExpierence != value))
				{
					this.OnDateExpierenceChanging(value);
					this.SendPropertyChanging();
					this._DateExpierence = value;
					this.SendPropertyChanged("DateExpierence");
					this.OnDateExpierenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrivingCategory", DbType="VarChar(20)")]
		public string DrivingCategory
		{
			get
			{
				return this._DrivingCategory;
			}
			set
			{
				if ((this._DrivingCategory != value))
				{
					this.OnDrivingCategoryChanging(value);
					this.SendPropertyChanging();
					this._DrivingCategory = value;
					this.SendPropertyChanged("DrivingCategory");
					this.OnDrivingCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._tblAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDriver_tblAccident", Storage="_tblAccidents", ThisKey="ID", OtherKey="DriverID")]
		public EntitySet<tblAccident> tblAccidents
		{
			get
			{
				return this._tblAccidents;
			}
			set
			{
				this._tblAccidents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblDriver", Storage="_tblAccount", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public tblAccount tblAccount
		{
			get
			{
				return this._tblAccount.Entity;
			}
			set
			{
				tblAccount previousValue = this._tblAccount.Entity;
				if (((previousValue != value) 
							|| (this._tblAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccount.Entity = null;
						previousValue.tblDrivers.Remove(this);
					}
					this._tblAccount.Entity = value;
					if ((value != null))
					{
						value.tblDrivers.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("tblAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblDriver = this;
		}
		
		private void detach_tblAccidents(tblAccident entity)
		{
			this.SendPropertyChanging();
			entity.tblDriver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVehicleMakes")]
	public partial class tblVehicleMake : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _AccountID;
		
		private bool _IsDeleted;
		
		private EntitySet<tblVehicle> _tblVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblVehicleMake()
		{
			this._tblVehicles = new EntitySet<tblVehicle>(new Action<tblVehicle>(this.attach_tblVehicles), new Action<tblVehicle>(this.detach_tblVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicleMake_tblVehicle", Storage="_tblVehicles", ThisKey="ID", OtherKey="MakeID")]
		public EntitySet<tblVehicle> tblVehicles
		{
			get
			{
				return this._tblVehicles;
			}
			set
			{
				this._tblVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicleMake = this;
		}
		
		private void detach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicleMake = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVehicleTypes")]
	public partial class tblVehicleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblVehicle> _tblVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblVehicleType()
		{
			this._tblVehicles = new EntitySet<tblVehicle>(new Action<tblVehicle>(this.attach_tblVehicles), new Action<tblVehicle>(this.detach_tblVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicleType_tblVehicle", Storage="_tblVehicles", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<tblVehicle> tblVehicles
		{
			get
			{
				return this._tblVehicles;
			}
			set
			{
				this._tblVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicleType = this;
		}
		
		private void detach_tblVehicles(tblVehicle entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVehicles")]
	public partial class tblVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Plate;
		
		private int _MakeID;
		
		private int _TypeID;
		
		private string _Model;
		
		private System.Nullable<int> _Year;
		
		private int _AccountID;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _IsDeleted;
		
		private EntitySet<tblClaim> _tblClaims;
		
		private EntityRef<tblAccount> _tblAccount;
		
		private EntityRef<tblVehicleMake> _tblVehicleMake;
		
		private EntityRef<tblVehicleType> _tblVehicleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPlateChanging(string value);
    partial void OnPlateChanged();
    partial void OnMakeIDChanging(int value);
    partial void OnMakeIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblVehicle()
		{
			this._tblClaims = new EntitySet<tblClaim>(new Action<tblClaim>(this.attach_tblClaims), new Action<tblClaim>(this.detach_tblClaims));
			this._tblAccount = default(EntityRef<tblAccount>);
			this._tblVehicleMake = default(EntityRef<tblVehicleMake>);
			this._tblVehicleType = default(EntityRef<tblVehicleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plate", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Plate
		{
			get
			{
				return this._Plate;
			}
			set
			{
				if ((this._Plate != value))
				{
					this.OnPlateChanging(value);
					this.SendPropertyChanging();
					this._Plate = value;
					this.SendPropertyChanged("Plate");
					this.OnPlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int NOT NULL")]
		public int MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					if (this._tblVehicleMake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMakeIDChanging(value);
					this.SendPropertyChanging();
					this._MakeID = value;
					this.SendPropertyChanged("MakeID");
					this.OnMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._tblVehicleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._tblAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicle_tblClaim", Storage="_tblClaims", ThisKey="ID", OtherKey="VehicleID")]
		public EntitySet<tblClaim> tblClaims
		{
			get
			{
				return this._tblClaims;
			}
			set
			{
				this._tblClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAccount_tblVehicle", Storage="_tblAccount", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public tblAccount tblAccount
		{
			get
			{
				return this._tblAccount.Entity;
			}
			set
			{
				tblAccount previousValue = this._tblAccount.Entity;
				if (((previousValue != value) 
							|| (this._tblAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAccount.Entity = null;
						previousValue.tblVehicles.Remove(this);
					}
					this._tblAccount.Entity = value;
					if ((value != null))
					{
						value.tblVehicles.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("tblAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicleMake_tblVehicle", Storage="_tblVehicleMake", ThisKey="MakeID", OtherKey="ID", IsForeignKey=true)]
		public tblVehicleMake tblVehicleMake
		{
			get
			{
				return this._tblVehicleMake.Entity;
			}
			set
			{
				tblVehicleMake previousValue = this._tblVehicleMake.Entity;
				if (((previousValue != value) 
							|| (this._tblVehicleMake.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblVehicleMake.Entity = null;
						previousValue.tblVehicles.Remove(this);
					}
					this._tblVehicleMake.Entity = value;
					if ((value != null))
					{
						value.tblVehicles.Add(this);
						this._MakeID = value.ID;
					}
					else
					{
						this._MakeID = default(int);
					}
					this.SendPropertyChanged("tblVehicleMake");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVehicleType_tblVehicle", Storage="_tblVehicleType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public tblVehicleType tblVehicleType
		{
			get
			{
				return this._tblVehicleType.Entity;
			}
			set
			{
				tblVehicleType previousValue = this._tblVehicleType.Entity;
				if (((previousValue != value) 
							|| (this._tblVehicleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblVehicleType.Entity = null;
						previousValue.tblVehicles.Remove(this);
					}
					this._tblVehicleType.Entity = value;
					if ((value != null))
					{
						value.tblVehicles.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("tblVehicleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicle = this;
		}
		
		private void detach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocGroups")]
	public partial class tblDocGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _IsDeleted;
		
		private EntitySet<tblDocType> _tblDocTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblDocGroup()
		{
			this._tblDocTypes = new EntitySet<tblDocType>(new Action<tblDocType>(this.attach_tblDocTypes), new Action<tblDocType>(this.detach_tblDocTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocGroup_tblDocType", Storage="_tblDocTypes", ThisKey="ID", OtherKey="DocGroupID")]
		public EntitySet<tblDocType> tblDocTypes
		{
			get
			{
				return this._tblDocTypes;
			}
			set
			{
				this._tblDocTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblDocTypes(tblDocType entity)
		{
			this.SendPropertyChanging();
			entity.tblDocGroup = this;
		}
		
		private void detach_tblDocTypes(tblDocType entity)
		{
			this.SendPropertyChanging();
			entity.tblDocGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocTypes")]
	public partial class tblDocType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _DocGroupID;
		
		private int _AccountID;
		
		private bool _IsDeleted;
		
		private EntitySet<tblDoc> _tblDocs;
		
		private EntitySet<tblInsPolicyDoc> _tblInsPolicyDocs;
		
		private EntityRef<tblDocGroup> _tblDocGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDocGroupIDChanging(int value);
    partial void OnDocGroupIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblDocType()
		{
			this._tblDocs = new EntitySet<tblDoc>(new Action<tblDoc>(this.attach_tblDocs), new Action<tblDoc>(this.detach_tblDocs));
			this._tblInsPolicyDocs = new EntitySet<tblInsPolicyDoc>(new Action<tblInsPolicyDoc>(this.attach_tblInsPolicyDocs), new Action<tblInsPolicyDoc>(this.detach_tblInsPolicyDocs));
			this._tblDocGroup = default(EntityRef<tblDocGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocGroupID", DbType="Int NOT NULL")]
		public int DocGroupID
		{
			get
			{
				return this._DocGroupID;
			}
			set
			{
				if ((this._DocGroupID != value))
				{
					if (this._tblDocGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocGroupIDChanging(value);
					this.SendPropertyChanging();
					this._DocGroupID = value;
					this.SendPropertyChanged("DocGroupID");
					this.OnDocGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocType_tblDoc", Storage="_tblDocs", ThisKey="ID", OtherKey="DocTypeID")]
		public EntitySet<tblDoc> tblDocs
		{
			get
			{
				return this._tblDocs;
			}
			set
			{
				this._tblDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocType_tblInsPolicyDoc", Storage="_tblInsPolicyDocs", ThisKey="ID", OtherKey="DocTypeID")]
		public EntitySet<tblInsPolicyDoc> tblInsPolicyDocs
		{
			get
			{
				return this._tblInsPolicyDocs;
			}
			set
			{
				this._tblInsPolicyDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocGroup_tblDocType", Storage="_tblDocGroup", ThisKey="DocGroupID", OtherKey="ID", IsForeignKey=true)]
		public tblDocGroup tblDocGroup
		{
			get
			{
				return this._tblDocGroup.Entity;
			}
			set
			{
				tblDocGroup previousValue = this._tblDocGroup.Entity;
				if (((previousValue != value) 
							|| (this._tblDocGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDocGroup.Entity = null;
						previousValue.tblDocTypes.Remove(this);
					}
					this._tblDocGroup.Entity = value;
					if ((value != null))
					{
						value.tblDocTypes.Add(this);
						this._DocGroupID = value.ID;
					}
					else
					{
						this._DocGroupID = default(int);
					}
					this.SendPropertyChanged("tblDocGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblDocs(tblDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblDocType = this;
		}
		
		private void detach_tblDocs(tblDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblDocType = null;
		}
		
		private void attach_tblInsPolicyDocs(tblInsPolicyDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblDocType = this;
		}
		
		private void detach_tblInsPolicyDocs(tblInsPolicyDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblDocType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocs")]
	public partial class tblDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DocName;
		
		private string _FileName;
		
		private string _FileType;
		
		private System.DateTime _FileDate;
		
		private int _FileSize;
		
		private int _UserID;
		
		private int _DocTypeID;
		
		private int _RefID;
		
		private short _SortNo;
		
		private bool _IsDeleted;
		
		private EntityRef<tblDocType> _tblDocType;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocNameChanging(string value);
    partial void OnDocNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnFileDateChanging(System.DateTime value);
    partial void OnFileDateChanged();
    partial void OnFileSizeChanging(int value);
    partial void OnFileSizeChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDocTypeIDChanging(int value);
    partial void OnDocTypeIDChanged();
    partial void OnRefIDChanging(int value);
    partial void OnRefIDChanged();
    partial void OnSortNoChanging(short value);
    partial void OnSortNoChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblDoc()
		{
			this._tblDocType = default(EntityRef<tblDocType>);
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocName", DbType="NVarChar(100)")]
		public string DocName
		{
			get
			{
				return this._DocName;
			}
			set
			{
				if ((this._DocName != value))
				{
					this.OnDocNameChanging(value);
					this.SendPropertyChanging();
					this._DocName = value;
					this.SendPropertyChanged("DocName");
					this.OnDocNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileDate", DbType="Date NOT NULL")]
		public System.DateTime FileDate
		{
			get
			{
				return this._FileDate;
			}
			set
			{
				if ((this._FileDate != value))
				{
					this.OnFileDateChanging(value);
					this.SendPropertyChanging();
					this._FileDate = value;
					this.SendPropertyChanged("FileDate");
					this.OnFileDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="Int NOT NULL")]
		public int FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTypeID", DbType="Int NOT NULL")]
		public int DocTypeID
		{
			get
			{
				return this._DocTypeID;
			}
			set
			{
				if ((this._DocTypeID != value))
				{
					if (this._tblDocType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocTypeID = value;
					this.SendPropertyChanged("DocTypeID");
					this.OnDocTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefID", DbType="Int NOT NULL")]
		public int RefID
		{
			get
			{
				return this._RefID;
			}
			set
			{
				if ((this._RefID != value))
				{
					this.OnRefIDChanging(value);
					this.SendPropertyChanging();
					this._RefID = value;
					this.SendPropertyChanged("RefID");
					this.OnRefIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortNo", DbType="SmallInt NOT NULL")]
		public short SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocType_tblDoc", Storage="_tblDocType", ThisKey="DocTypeID", OtherKey="ID", IsForeignKey=true)]
		public tblDocType tblDocType
		{
			get
			{
				return this._tblDocType.Entity;
			}
			set
			{
				tblDocType previousValue = this._tblDocType.Entity;
				if (((previousValue != value) 
							|| (this._tblDocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDocType.Entity = null;
						previousValue.tblDocs.Remove(this);
					}
					this._tblDocType.Entity = value;
					if ((value != null))
					{
						value.tblDocs.Add(this);
						this._DocTypeID = value.ID;
					}
					else
					{
						this._DocTypeID = default(int);
					}
					this.SendPropertyChanged("tblDocType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblDoc", Storage="_tblUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblDocs.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblDocs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblInsPolicyDocs")]
	public partial class tblInsPolicyDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InsPolicyID;
		
		private int _DocTypeID;
		
		private EntityRef<tblDocType> _tblDocType;
		
		private EntityRef<tblInsPolicy> _tblInsPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsPolicyIDChanging(int value);
    partial void OnInsPolicyIDChanged();
    partial void OnDocTypeIDChanging(int value);
    partial void OnDocTypeIDChanged();
    #endregion
		
		public tblInsPolicyDoc()
		{
			this._tblDocType = default(EntityRef<tblDocType>);
			this._tblInsPolicy = default(EntityRef<tblInsPolicy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsPolicyID", DbType="Int NOT NULL")]
		public int InsPolicyID
		{
			get
			{
				return this._InsPolicyID;
			}
			set
			{
				if ((this._InsPolicyID != value))
				{
					if (this._tblInsPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._InsPolicyID = value;
					this.SendPropertyChanged("InsPolicyID");
					this.OnInsPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTypeID", DbType="Int NOT NULL")]
		public int DocTypeID
		{
			get
			{
				return this._DocTypeID;
			}
			set
			{
				if ((this._DocTypeID != value))
				{
					if (this._tblDocType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocTypeID = value;
					this.SendPropertyChanged("DocTypeID");
					this.OnDocTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDocType_tblInsPolicyDoc", Storage="_tblDocType", ThisKey="DocTypeID", OtherKey="ID", IsForeignKey=true)]
		public tblDocType tblDocType
		{
			get
			{
				return this._tblDocType.Entity;
			}
			set
			{
				tblDocType previousValue = this._tblDocType.Entity;
				if (((previousValue != value) 
							|| (this._tblDocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDocType.Entity = null;
						previousValue.tblInsPolicyDocs.Remove(this);
					}
					this._tblDocType.Entity = value;
					if ((value != null))
					{
						value.tblInsPolicyDocs.Add(this);
						this._DocTypeID = value.ID;
					}
					else
					{
						this._DocTypeID = default(int);
					}
					this.SendPropertyChanged("tblDocType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblInsPolicyDoc", Storage="_tblInsPolicy", ThisKey="InsPolicyID", OtherKey="ID", IsForeignKey=true)]
		public tblInsPolicy tblInsPolicy
		{
			get
			{
				return this._tblInsPolicy.Entity;
			}
			set
			{
				tblInsPolicy previousValue = this._tblInsPolicy.Entity;
				if (((previousValue != value) 
							|| (this._tblInsPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblInsPolicy.Entity = null;
						previousValue.tblInsPolicyDocs.Remove(this);
					}
					this._tblInsPolicy.Entity = value;
					if ((value != null))
					{
						value.tblInsPolicyDocs.Add(this);
						this._InsPolicyID = value.ID;
					}
					else
					{
						this._InsPolicyID = default(int);
					}
					this.SendPropertyChanged("tblInsPolicy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblWarningEvents")]
	public partial class tblWarningEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblWarning> _tblWarnings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblWarningEvent()
		{
			this._tblWarnings = new EntitySet<tblWarning>(new Action<tblWarning>(this.attach_tblWarnings), new Action<tblWarning>(this.detach_tblWarnings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblWarningEvent_tblWarning", Storage="_tblWarnings", ThisKey="ID", OtherKey="WarningEventID")]
		public EntitySet<tblWarning> tblWarnings
		{
			get
			{
				return this._tblWarnings;
			}
			set
			{
				this._tblWarnings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblWarnings(tblWarning entity)
		{
			this.SendPropertyChanging();
			entity.tblWarningEvent = this;
		}
		
		private void detach_tblWarnings(tblWarning entity)
		{
			this.SendPropertyChanging();
			entity.tblWarningEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblWarnings")]
	public partial class tblWarning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InsPolicyID;
		
		private int _WarningEventID;
		
		private string _Emails;
		
		private int _Term;
		
		private bool _IsDeleted;
		
		private EntityRef<tblWarningEvent> _tblWarningEvent;
		
		private EntityRef<tblInsPolicy> _tblInsPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsPolicyIDChanging(int value);
    partial void OnInsPolicyIDChanged();
    partial void OnWarningEventIDChanging(int value);
    partial void OnWarningEventIDChanged();
    partial void OnEmailsChanging(string value);
    partial void OnEmailsChanged();
    partial void OnTermChanging(int value);
    partial void OnTermChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblWarning()
		{
			this._tblWarningEvent = default(EntityRef<tblWarningEvent>);
			this._tblInsPolicy = default(EntityRef<tblInsPolicy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsPolicyID", DbType="Int NOT NULL")]
		public int InsPolicyID
		{
			get
			{
				return this._InsPolicyID;
			}
			set
			{
				if ((this._InsPolicyID != value))
				{
					if (this._tblInsPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._InsPolicyID = value;
					this.SendPropertyChanged("InsPolicyID");
					this.OnInsPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarningEventID", DbType="Int NOT NULL")]
		public int WarningEventID
		{
			get
			{
				return this._WarningEventID;
			}
			set
			{
				if ((this._WarningEventID != value))
				{
					if (this._tblWarningEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarningEventIDChanging(value);
					this.SendPropertyChanging();
					this._WarningEventID = value;
					this.SendPropertyChanged("WarningEventID");
					this.OnWarningEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emails", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Emails
		{
			get
			{
				return this._Emails;
			}
			set
			{
				if ((this._Emails != value))
				{
					this.OnEmailsChanging(value);
					this.SendPropertyChanging();
					this._Emails = value;
					this.SendPropertyChanged("Emails");
					this.OnEmailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="Int NOT NULL")]
		public int Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblWarningEvent_tblWarning", Storage="_tblWarningEvent", ThisKey="WarningEventID", OtherKey="ID", IsForeignKey=true)]
		public tblWarningEvent tblWarningEvent
		{
			get
			{
				return this._tblWarningEvent.Entity;
			}
			set
			{
				tblWarningEvent previousValue = this._tblWarningEvent.Entity;
				if (((previousValue != value) 
							|| (this._tblWarningEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblWarningEvent.Entity = null;
						previousValue.tblWarnings.Remove(this);
					}
					this._tblWarningEvent.Entity = value;
					if ((value != null))
					{
						value.tblWarnings.Add(this);
						this._WarningEventID = value.ID;
					}
					else
					{
						this._WarningEventID = default(int);
					}
					this.SendPropertyChanged("tblWarningEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblWarning", Storage="_tblInsPolicy", ThisKey="InsPolicyID", OtherKey="ID", IsForeignKey=true)]
		public tblInsPolicy tblInsPolicy
		{
			get
			{
				return this._tblInsPolicy.Entity;
			}
			set
			{
				tblInsPolicy previousValue = this._tblInsPolicy.Entity;
				if (((previousValue != value) 
							|| (this._tblInsPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblInsPolicy.Entity = null;
						previousValue.tblWarnings.Remove(this);
					}
					this._tblInsPolicy.Entity = value;
					if ((value != null))
					{
						value.tblWarnings.Add(this);
						this._InsPolicyID = value.ID;
					}
					else
					{
						this._InsPolicyID = default(int);
					}
					this.SendPropertyChanged("tblInsPolicy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblInsPolicies")]
	public partial class tblInsPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PolicyNumber;
		
		private int _InsurerID;
		
		private int _ClaimTypeID;
		
		private System.DateTime _EndDate;
		
		private string _MailsAddresses;
		
		private string _InsuredName;
		
		private string _InsuredCode;
		
		private int _InsuredContactID;
		
		private string _InsuredAddress;
		
		private int _Warn_InfoAfterAcc;
		
		private int _Warn_PaymentAfterPapers;
		
		private int _Warn_SystemOfAccTerm;
		
		private int _Warn_SystemOfPayTerm;
		
		private bool _IsDeleted;
		
		private EntitySet<tblClaim> _tblClaims;
		
		private EntitySet<tblInsPolicyDoc> _tblInsPolicyDocs;
		
		private EntitySet<tblWarning> _tblWarnings;
		
		private EntityRef<tblClaimType> _tblClaimType;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblInsurer> _tblInsurer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    partial void OnInsurerIDChanging(int value);
    partial void OnInsurerIDChanged();
    partial void OnClaimTypeIDChanging(int value);
    partial void OnClaimTypeIDChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMailsAddressesChanging(string value);
    partial void OnMailsAddressesChanged();
    partial void OnInsuredNameChanging(string value);
    partial void OnInsuredNameChanged();
    partial void OnInsuredCodeChanging(string value);
    partial void OnInsuredCodeChanged();
    partial void OnInsuredContactIDChanging(int value);
    partial void OnInsuredContactIDChanged();
    partial void OnInsuredAddressChanging(string value);
    partial void OnInsuredAddressChanged();
    partial void OnWarn_InfoAfterAccChanging(int value);
    partial void OnWarn_InfoAfterAccChanged();
    partial void OnWarn_PaymentAfterPapersChanging(int value);
    partial void OnWarn_PaymentAfterPapersChanged();
    partial void OnWarn_SystemOfAccTermChanging(int value);
    partial void OnWarn_SystemOfAccTermChanged();
    partial void OnWarn_SystemOfPayTermChanging(int value);
    partial void OnWarn_SystemOfPayTermChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblInsPolicy()
		{
			this._tblClaims = new EntitySet<tblClaim>(new Action<tblClaim>(this.attach_tblClaims), new Action<tblClaim>(this.detach_tblClaims));
			this._tblInsPolicyDocs = new EntitySet<tblInsPolicyDoc>(new Action<tblInsPolicyDoc>(this.attach_tblInsPolicyDocs), new Action<tblInsPolicyDoc>(this.detach_tblInsPolicyDocs));
			this._tblWarnings = new EntitySet<tblWarning>(new Action<tblWarning>(this.attach_tblWarnings), new Action<tblWarning>(this.detach_tblWarnings));
			this._tblClaimType = default(EntityRef<tblClaimType>);
			this._tblUser = default(EntityRef<tblUser>);
			this._tblInsurer = default(EntityRef<tblInsurer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurerID", DbType="Int NOT NULL")]
		public int InsurerID
		{
			get
			{
				return this._InsurerID;
			}
			set
			{
				if ((this._InsurerID != value))
				{
					if (this._tblInsurer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsurerIDChanging(value);
					this.SendPropertyChanging();
					this._InsurerID = value;
					this.SendPropertyChanged("InsurerID");
					this.OnInsurerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimTypeID", DbType="Int NOT NULL")]
		public int ClaimTypeID
		{
			get
			{
				return this._ClaimTypeID;
			}
			set
			{
				if ((this._ClaimTypeID != value))
				{
					if (this._tblClaimType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClaimTypeID = value;
					this.SendPropertyChanged("ClaimTypeID");
					this.OnClaimTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailsAddresses", DbType="VarChar(250)")]
		public string MailsAddresses
		{
			get
			{
				return this._MailsAddresses;
			}
			set
			{
				if ((this._MailsAddresses != value))
				{
					this.OnMailsAddressesChanging(value);
					this.SendPropertyChanging();
					this._MailsAddresses = value;
					this.SendPropertyChanged("MailsAddresses");
					this.OnMailsAddressesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InsuredName
		{
			get
			{
				return this._InsuredName;
			}
			set
			{
				if ((this._InsuredName != value))
				{
					this.OnInsuredNameChanging(value);
					this.SendPropertyChanging();
					this._InsuredName = value;
					this.SendPropertyChanged("InsuredName");
					this.OnInsuredNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InsuredCode
		{
			get
			{
				return this._InsuredCode;
			}
			set
			{
				if ((this._InsuredCode != value))
				{
					this.OnInsuredCodeChanging(value);
					this.SendPropertyChanging();
					this._InsuredCode = value;
					this.SendPropertyChanged("InsuredCode");
					this.OnInsuredCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredContactID", DbType="Int NOT NULL")]
		public int InsuredContactID
		{
			get
			{
				return this._InsuredContactID;
			}
			set
			{
				if ((this._InsuredContactID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuredContactIDChanging(value);
					this.SendPropertyChanging();
					this._InsuredContactID = value;
					this.SendPropertyChanged("InsuredContactID");
					this.OnInsuredContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredAddress", DbType="NVarChar(100)")]
		public string InsuredAddress
		{
			get
			{
				return this._InsuredAddress;
			}
			set
			{
				if ((this._InsuredAddress != value))
				{
					this.OnInsuredAddressChanging(value);
					this.SendPropertyChanging();
					this._InsuredAddress = value;
					this.SendPropertyChanged("InsuredAddress");
					this.OnInsuredAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warn_InfoAfterAcc", DbType="Int NOT NULL")]
		public int Warn_InfoAfterAcc
		{
			get
			{
				return this._Warn_InfoAfterAcc;
			}
			set
			{
				if ((this._Warn_InfoAfterAcc != value))
				{
					this.OnWarn_InfoAfterAccChanging(value);
					this.SendPropertyChanging();
					this._Warn_InfoAfterAcc = value;
					this.SendPropertyChanged("Warn_InfoAfterAcc");
					this.OnWarn_InfoAfterAccChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warn_PaymentAfterPapers", DbType="Int NOT NULL")]
		public int Warn_PaymentAfterPapers
		{
			get
			{
				return this._Warn_PaymentAfterPapers;
			}
			set
			{
				if ((this._Warn_PaymentAfterPapers != value))
				{
					this.OnWarn_PaymentAfterPapersChanging(value);
					this.SendPropertyChanging();
					this._Warn_PaymentAfterPapers = value;
					this.SendPropertyChanged("Warn_PaymentAfterPapers");
					this.OnWarn_PaymentAfterPapersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warn_SystemOfAccTerm", DbType="Int NOT NULL")]
		public int Warn_SystemOfAccTerm
		{
			get
			{
				return this._Warn_SystemOfAccTerm;
			}
			set
			{
				if ((this._Warn_SystemOfAccTerm != value))
				{
					this.OnWarn_SystemOfAccTermChanging(value);
					this.SendPropertyChanging();
					this._Warn_SystemOfAccTerm = value;
					this.SendPropertyChanged("Warn_SystemOfAccTerm");
					this.OnWarn_SystemOfAccTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warn_SystemOfPayTerm", DbType="Int NOT NULL")]
		public int Warn_SystemOfPayTerm
		{
			get
			{
				return this._Warn_SystemOfPayTerm;
			}
			set
			{
				if ((this._Warn_SystemOfPayTerm != value))
				{
					this.OnWarn_SystemOfPayTermChanging(value);
					this.SendPropertyChanging();
					this._Warn_SystemOfPayTerm = value;
					this.SendPropertyChanged("Warn_SystemOfPayTerm");
					this.OnWarn_SystemOfPayTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblClaim", Storage="_tblClaims", ThisKey="ID", OtherKey="InsPolicyID")]
		public EntitySet<tblClaim> tblClaims
		{
			get
			{
				return this._tblClaims;
			}
			set
			{
				this._tblClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblInsPolicyDoc", Storage="_tblInsPolicyDocs", ThisKey="ID", OtherKey="InsPolicyID")]
		public EntitySet<tblInsPolicyDoc> tblInsPolicyDocs
		{
			get
			{
				return this._tblInsPolicyDocs;
			}
			set
			{
				this._tblInsPolicyDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsPolicy_tblWarning", Storage="_tblWarnings", ThisKey="ID", OtherKey="InsPolicyID")]
		public EntitySet<tblWarning> tblWarnings
		{
			get
			{
				return this._tblWarnings;
			}
			set
			{
				this._tblWarnings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClaimType_tblInsPolicy", Storage="_tblClaimType", ThisKey="ClaimTypeID", OtherKey="ID", IsForeignKey=true)]
		public tblClaimType tblClaimType
		{
			get
			{
				return this._tblClaimType.Entity;
			}
			set
			{
				tblClaimType previousValue = this._tblClaimType.Entity;
				if (((previousValue != value) 
							|| (this._tblClaimType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClaimType.Entity = null;
						previousValue.tblInsPolicies.Remove(this);
					}
					this._tblClaimType.Entity = value;
					if ((value != null))
					{
						value.tblInsPolicies.Add(this);
						this._ClaimTypeID = value.ID;
					}
					else
					{
						this._ClaimTypeID = default(int);
					}
					this.SendPropertyChanged("tblClaimType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblInsPolicy", Storage="_tblUser", ThisKey="InsuredContactID", OtherKey="ID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblInsPolicies.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblInsPolicies.Add(this);
						this._InsuredContactID = value.ID;
					}
					else
					{
						this._InsuredContactID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblInsurer_tblInsPolicy", Storage="_tblInsurer", ThisKey="InsurerID", OtherKey="ID", IsForeignKey=true)]
		public tblInsurer tblInsurer
		{
			get
			{
				return this._tblInsurer.Entity;
			}
			set
			{
				tblInsurer previousValue = this._tblInsurer.Entity;
				if (((previousValue != value) 
							|| (this._tblInsurer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblInsurer.Entity = null;
						previousValue.tblInsPolicies.Remove(this);
					}
					this._tblInsurer.Entity = value;
					if ((value != null))
					{
						value.tblInsPolicies.Add(this);
						this._InsurerID = value.ID;
					}
					else
					{
						this._InsurerID = default(int);
					}
					this.SendPropertyChanged("tblInsurer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = this;
		}
		
		private void detach_tblClaims(tblClaim entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = null;
		}
		
		private void attach_tblInsPolicyDocs(tblInsPolicyDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = this;
		}
		
		private void detach_tblInsPolicyDocs(tblInsPolicyDoc entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = null;
		}
		
		private void attach_tblWarnings(tblWarning entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = this;
		}
		
		private void detach_tblWarnings(tblWarning entity)
		{
			this.SendPropertyChanging();
			entity.tblInsPolicy = null;
		}
	}
	
	public partial class proc_AccidentsResult
	{
		
		private int _ID;
		
		private int _No;
		
		private string _Date;
		
		private string _Place;
		
		private string _AccType;
		
		private int _CNo_All;
		
		private int _CNo_NotF;
		
		private double _LossSum;
		
		private byte _AmountIsConfirmed;
		
		private string _ShortNote;
		
		private string _LongNote;
		
		private string _Driver;
		
		private string _UserName;
		
		private string _Claims_C;
		
		private string _Claims_C2;
		
		public proc_AccidentsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this._No = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="VarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="NVarChar(252)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this._Place = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string AccType
		{
			get
			{
				return this._AccType;
			}
			set
			{
				if ((this._AccType != value))
				{
					this._AccType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNo_All", DbType="Int NOT NULL")]
		public int CNo_All
		{
			get
			{
				return this._CNo_All;
			}
			set
			{
				if ((this._CNo_All != value))
				{
					this._CNo_All = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNo_NotF", DbType="Int NOT NULL")]
		public int CNo_NotF
		{
			get
			{
				return this._CNo_NotF;
			}
			set
			{
				if ((this._CNo_NotF != value))
				{
					this._CNo_NotF = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossSum", DbType="Float NOT NULL")]
		public double LossSum
		{
			get
			{
				return this._LossSum;
			}
			set
			{
				if ((this._LossSum != value))
				{
					this._LossSum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountIsConfirmed", DbType="TinyInt NOT NULL")]
		public byte AmountIsConfirmed
		{
			get
			{
				return this._AmountIsConfirmed;
			}
			set
			{
				if ((this._AmountIsConfirmed != value))
				{
					this._AmountIsConfirmed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortNote", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ShortNote
		{
			get
			{
				return this._ShortNote;
			}
			set
			{
				if ((this._ShortNote != value))
				{
					this._ShortNote = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongNote", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string LongNote
		{
			get
			{
				return this._LongNote;
			}
			set
			{
				if ((this._LongNote != value))
				{
					this._LongNote = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver", DbType="NVarChar(201)")]
		public string Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				if ((this._Driver != value))
				{
					this._Driver = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Claims_C", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Claims_C
		{
			get
			{
				return this._Claims_C;
			}
			set
			{
				if ((this._Claims_C != value))
				{
					this._Claims_C = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Claims_C2", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Claims_C2
		{
			get
			{
				return this._Claims_C2;
			}
			set
			{
				if ((this._Claims_C2 != value))
				{
					this._Claims_C2 = value;
				}
			}
		}
	}
	
	public partial class proc_VehiclesResult
	{
		
		private int _ID;
		
		private string _Type;
		
		private string _Plate;
		
		private string _Make;
		
		private string _Model;
		
		private System.Nullable<int> _Year;
		
		private string _Docs;
		
		private string _EndDate;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _MakeID;
		
		public proc_VehiclesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plate", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Plate
		{
			get
			{
				return this._Plate;
			}
			set
			{
				if ((this._Plate != value))
				{
					this._Plate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this._Make = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this._Model = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Docs", DbType="VarChar(17)")]
		public string Docs
		{
			get
			{
				return this._Docs;
			}
			set
			{
				if ((this._Docs != value))
				{
					this._Docs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Char(10)")]
		public string EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int")]
		public System.Nullable<int> MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					this._MakeID = value;
				}
			}
		}
	}
	
	public partial class proc_InsPoliciesResult
	{
		
		private int _ID;
		
		private string _ClaimType;
		
		private string _InsurerName;
		
		private string _InsuredCode;
		
		private string _InsuredAddress;
		
		private string _PolicyNumber;
		
		private string _EndDate;
		
		private string _InsuredName;
		
		private string _InsuredContactName;
		
		private int _InsuredContactID;
		
		private int _ClaimTypeID;
		
		private int _InsurerID;
		
		public proc_InsPoliciesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this._ClaimType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurerName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InsurerName
		{
			get
			{
				return this._InsurerName;
			}
			set
			{
				if ((this._InsurerName != value))
				{
					this._InsurerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InsuredCode
		{
			get
			{
				return this._InsuredCode;
			}
			set
			{
				if ((this._InsuredCode != value))
				{
					this._InsuredCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredAddress", DbType="NVarChar(100)")]
		public string InsuredAddress
		{
			get
			{
				return this._InsuredAddress;
			}
			set
			{
				if ((this._InsuredAddress != value))
				{
					this._InsuredAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this._PolicyNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Char(10)")]
		public string EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InsuredName
		{
			get
			{
				return this._InsuredName;
			}
			set
			{
				if ((this._InsuredName != value))
				{
					this._InsuredName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredContactName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string InsuredContactName
		{
			get
			{
				return this._InsuredContactName;
			}
			set
			{
				if ((this._InsuredContactName != value))
				{
					this._InsuredContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredContactID", DbType="Int NOT NULL")]
		public int InsuredContactID
		{
			get
			{
				return this._InsuredContactID;
			}
			set
			{
				if ((this._InsuredContactID != value))
				{
					this._InsuredContactID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimTypeID", DbType="Int NOT NULL")]
		public int ClaimTypeID
		{
			get
			{
				return this._ClaimTypeID;
			}
			set
			{
				if ((this._ClaimTypeID != value))
				{
					this._ClaimTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurerID", DbType="Int NOT NULL")]
		public int InsurerID
		{
			get
			{
				return this._InsurerID;
			}
			set
			{
				if ((this._InsurerID != value))
				{
					this._InsurerID = value;
				}
			}
		}
	}
	
	public partial class proc_DriversResult
	{
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _DateExpierence;
		
		private string _DrivingCategory;
		
		private string _Phone;
		
		private string _Docs;
		
		private string _DateEnd;
		
		public proc_DriversResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateExpierence", DbType="Char(10)")]
		public string DateExpierence
		{
			get
			{
				return this._DateExpierence;
			}
			set
			{
				if ((this._DateExpierence != value))
				{
					this._DateExpierence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrivingCategory", DbType="VarChar(20)")]
		public string DrivingCategory
		{
			get
			{
				return this._DrivingCategory;
			}
			set
			{
				if ((this._DrivingCategory != value))
				{
					this._DrivingCategory = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Docs", DbType="VarChar(17)")]
		public string Docs
		{
			get
			{
				return this._Docs;
			}
			set
			{
				if ((this._Docs != value))
				{
					this._Docs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="Char(10)")]
		public string DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this._DateEnd = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
